/**
DO NOT EDIT.  This code is generated.
Generated by: sz-sdk-errors/bin/generate_java.py
Generated for: sz-sdk-java/src/main/java/com/senzing/sdk/core/SzExceptionMapper.java
Generated date: 2025-02-13T18:58:27.165024+00:00
 */

 package com.senzing.sdk.core;

 import java.util.Map;
 import com.senzing.sdk.*;
 
 /**
  * Package-access class for mapping Senzing error code to
  * instances of {@link SzException}.
  */
 final class SzExceptionMapper {
     /**
      * Private constructor since all methods are static.
      */
     private SzExceptionMapper() {
         // do nothing
     }
 
     /**
      * Obtains the exception class for the specified error code.
      *
      * @param map The {@link Map} to which to add the mappings of
      *            error code keys and exception class objects.
      */
     public static void registerExceptions(Map<Integer, Class<? extends SzException>> map) {
         map.put(2, SzBadInputException.class);                 // EAS_ERR_INVALID_MESSAGE                                                               "Invalid Message"
         map.put(5, SzRetryableException.class);                // EAS_ERR_EXCEEDED_MAX_RETRIES                                                          "Exceeded the Maximum Number of Retries Allowed"
         map.put(7, SzBadInputException.class);                 // EAS_ERR_EMPTY_MESSAGE                                                                 "Empty Message"
         map.put(10, SzRetryTimeoutExceededException.class);    // EAS_ERR_RETRY_TIMEOUT                                                                 "Retry timeout exceeded RES_ENT_ID locklist [{0}]"
         map.put(14, SzConfigurationException.class);           // EAS_ERR_INVALID_DATASTORE_CONFIGURATION_TYPE                                          "Invalid Datastore Configuration Type"
         map.put(18, SzException.class);                        // EAS_ERR_COULD_NOT_INITIALIZE_SYSTEM_PARAMETERS                                        "Could not initialize system parameters"
         map.put(19, SzConfigurationException.class);           // EAS_ERR_NO_CONFIGURATION_FOUND                                                        "Configuration not found"
         map.put(20, SzConfigurationException.class);           // EAS_ERR_CONFIG_CANNOT_BE_NULL_DATABASE                                                "Configuration cannot be loaded from database connection"
         map.put(21, SzConfigurationException.class);           // EAS_ERR_CONFIG_CANNOT_BE_NULL_CONFIG_FILE                                             "Configuration cannot be loaded from config file"
         map.put(22, SzBadInputException.class);                // EAS_ERR_INVALID_DOCTYPE                                                               "Invalid DocType {0}"
         map.put(23, SzBadInputException.class);                // EAS_ERR_CONFLICTING_DATA_SOURCE_VALUES                                                "Conflicting DATA_SOURCE values '{0}' and '{1}'"
         map.put(24, SzBadInputException.class);                // EAS_ERR_CONFLICTING_RECORD_ID_VALUES                                                  "Conflicting RECORD_ID values '{0}' and '{1}'"
         map.put(25, SzBadInputException.class);                // EAS_ERR_INVALID_BULK_REQUEST                                                          "Invalid Bulk Request [{0}]"
         map.put(26, SzBadInputException.class);                // EAS_ERR_RESERVED_WORD_USED_IN_DOCUMENT                                                "Inbound data contains a reserved keyword '{0}'"
         map.put(27, SzException.class);                        // EAS_ERR_INVALID_VALUE_FOR_SEARCH_ATTRIBUTES                                           "Invalid value for search-attributes"
         map.put(28, SzConfigurationException.class);           // EAS_ERR_INVALID_JSON_CONFIG_DOCUMENT                                                  "Invalid JSON config document"
         map.put(29, SzException.class);                        // EAS_ERR_INVALID_VALUE_OF_MAX_ENTITIES                                                 "Invalid value of max entities '{0}'"
         map.put(30, SzConfigurationException.class);           // EAS_ERR_INVALID_MATCH_LEVEL                                                           "Invalid match level '{0}'"
         map.put(31, SzException.class);                        // EAS_ERR_INVALID_VALUE_OF_MAX_DEGREE                                                   "Invalid value of max degree '{0}'"
         map.put(32, SzException.class);                        // EAS_ERR_INVALID_VALUE_OF_BUILDOUT_DEGREE                                              "Invalid value of build out degree '{0}'"
         map.put(33, SzNotFoundException.class);                // EAS_ERR_UNKNOWN_DSRC_RECORD_ID                                                        "Unknown record: dsrc[{0}], record[{1}]"
         map.put(34, SzConfigurationException.class);           // EAS_ERR_AMBIGUOUS_ENTITY_FTYPE_MISSING                                                "AMBIGUOUS_ENTITY Feature Type is not configured"
         map.put(35, SzConfigurationException.class);           // EAS_ERR_AMBIGUOUS_TIER_FELEM_MISSING                                                  "AMBIGUOUS_TIER Feature Element is not configured"
         map.put(36, SzConfigurationException.class);           // EAS_ERR_AMBIGUOUS_FTYPE_ID_FELEM_MISSING                                              "AMBIGUOUS_FTYPE_ID Feature Element is not configured"
         map.put(37, SzNotFoundException.class);                // EAS_ERR_UNKNOWN_RESOLVED_ENTITY_VALUE                                                 "Unknown resolved entity value '{0}'"
         map.put(38, SzException.class);                        // EAS_ERR_RECORD_HAS_NO_RESOLVED_ENTITY                                                 "Data source record has no resolved entity: dsrc[{0}], recordID[{1}]"
         map.put(39, SzException.class);                        // EAS_ERR_NO_OBSERVED_ENTITY_FOR_DSRC_ENTITY_KEY                                        "No observed entity for entity key: dsrc[{0}], record_id[{1}], key[{2}]"
         map.put(40, SzConfigurationException.class);           // EAS_ERR_CONFIG_COMPATIBILITY_MISMATCH                                                 "The engine configuration compatibility version [{0}] does not match the version of the provided config[{1}]."
         map.put(41, SzException.class);                        // EAS_ERR_DOCUMENT_PREPROCESSING_FAILED                                                 "Document preprocessing failed"
         map.put(42, SzException.class);                        // EAS_ERR_DOCUMENT_LOAD_PROCESSING_FAILED                                               "Document load processing failed"
         map.put(43, SzException.class);                        // EAS_ERR_DOCUMENT_ER_PROCESSING_FAILED                                                 "Document ER processing failed"
         map.put(44, SzException.class);                        // EAS_ERR_CHECK_ENTITY_PROCESSING_FAILED                                                "Check entity processing failed"
         map.put(45, SzException.class);                        // EAS_ERR_INPUT_PROCEDURE_PROCESSING_FAILED                                             "Input procedure processing failed"
         map.put(46, SzException.class);                        // EAS_ERR_DOCUMENT_HASHING_PROCESSING_FAILED                                            "Document hashing-processing failed"
         map.put(47, SzException.class);                        // EAS_ERR_SESSION_IS_INVALID                                                            "Session is invalid"
         map.put(48, SzNotInitializedException.class);          // EAS_ERR_G2_NOT_INITIALIZED                                                            "G2 is not initialized"
         map.put(50, SzNotInitializedException.class);          // EAS_ERR_G2HASHER_NOT_INITIALIZED                                                      "G2Hasher is not initialized"
         map.put(51, SzBadInputException.class);                // EAS_ERR_BOTH_RECORD_ID_AND_ENT_SRC_KEY_SPECIFIED                                      "Cannot use both Record ID and Entity Source Key in record"
         map.put(52, SzException.class);                        // EAS_ERR_UNKNOWN_RELATIONSHIP_ID_VALUE                                                 "Unknown relationship ID value '{0}'"
         map.put(53, SzBadInputException.class);                // EAS_ERR_G2DIAGNOSTIC_NOT_INITIALIZED                                                  "G2Diagnostic is not initialized"
         map.put(54, SzDatabaseException.class);                // EAS_ERR_G2_DATA_REPOSITORY_WAS_PURGED                                                 "Data repository was purged"
         map.put(55, SzException.class);                        // EAS_ERR_NO_RESOLVED_ENTITY_FOR_DSRC_ENTITY_KEY                                        "No resolved entity for entity key: dsrc[{0}], record_id[{1}], key[{2}]"
         map.put(56, SzException.class);                        // EAS_ERR_NO_RECORDS_EXIST_FOR_RESOLVED_ENTITY                                          "No data source records exist for entity ID: entityID[{0}]"
         map.put(57, SzException.class);                        // EAS_ERR_UNKNOWN_FEATURE_ID_VALUE                                                      "Unknown feature ID value '{0}'"
         map.put(58, SzException.class);                        // EAS_ERR_G2_INITIALIZATION_FAILURE                                                     "G2 initialization process has failed"
         map.put(60, SzConfigurationException.class);           // EAS_ERR_CONFIG_DATABASE_MISMATCH                                                      "The engine configuration does not match the records loaded into the repository:  errors[{0}]."
         map.put(61, SzConfigurationException.class);           // EAS_ERR_AMBIGUOUS_SUPPRESSED_LIBFEAT_FELEM_MISSING                                    "AMBIGUOUS_SUPRESSED_LIBFEAT Feature Element is not configured"
         map.put(62, SzConfigurationException.class);           // EAS_ERR_AMBIGUOUS_TYPE_FELEM_MISSING                                                  "AMBIGUOUS_TYPE Feature Element is not configured"
         map.put(63, SzNotInitializedException.class);          // EAS_ERR_G2CONFIGMGR_NOT_INITIALIZED                                                   "G2ConfigMgr is not initialized"
         map.put(64, SzConfigurationException.class);           // EAS_ERR_CONFUSED_ENTITY_FTYPE_MISSING                                                 "CONFUSED_ENTITY Feature Type is not configured"
         map.put(65, SzBadInputException.class);                // EAS_ERR_SUPPRESSED_RELATION_DOMAIN_FTYPE_MISSING                                      "SUPPRESSED_RELATION_DOMAIN Feature Type is not configured"
         map.put(66, SzBadInputException.class);                // EAS_ERR_UNKNOWN_GENERIC_PLAN_VALUE                                                    "Unknown generic plan value '{0}'"
         map.put(67, SzConfigurationException.class);           // EAS_ERR_INVALID_GENERIC_PLAN_VALUE                                                    "Invalid Generic Plan ID [{0}] configured for the '{1}' retention level.'"
         map.put(68, SzException.class);                        // EAS_ERR_UNKNOWN_ER_RESULT                                                             "Unknown ER-result."
         map.put(69, SzException.class);                        // EAS_ERR_NO_CANDIDATES                                                                 "No candidates."
         map.put(76, SzException.class);                        // EAS_ERR_INBOUND_FEATURE_VERSION_NEWER_THAN_CONFIG                                     "Inbound Feature Version [{0}] is newer than configured version [{1}] for feature type[{2}]."
         map.put(77, SzException.class);                        // EAS_ERR_ERROR_WHEN_PRIMING_GNR                                                        "Error when priming GNR resources '{0}'"
         map.put(78, SzException.class);                        // EAS_ERR_ERROR_WHEN_ENCRYPTING                                                         "Error when encrypting '{0}'"
         map.put(79, SzException.class);                        // EAS_ERR_ERROR_WHEN_DECRYPTING                                                         "Error when decrypting '{0}'"
         map.put(80, SzException.class);                        // EAS_ERR_ERROR_WHEN_VALIDATING_ENCRYPTION_SIGNATURE_COMPATIBILITY                      "Error when validating encryption signature compatibility '{0}'"
         map.put(81, SzException.class);                        // EAS_ERR_ERROR_WHEN_CHECKING_DISTINCT_FEATURE_GENERALIZATION                           "Error when checking distinct feature generalization '{0}'"
         map.put(82, SzException.class);                        // EAS_ERR_ERROR_WHEN_RUNNING_DQM                                                        "Error when running DQM '{0}'"
         map.put(83, SzException.class);                        // EAS_ERR_ERROR_WHEN_CREATING_EFEATS                                                    "Error when creating EFEATS '{0}'"
         map.put(84, SzException.class);                        // EAS_ERR_ERROR_WHEN_SIMPLE_SCORING                                                     "Error when simple scoring '{0}'"
         map.put(85, SzException.class);                        // EAS_ERR_ERROR_WHEN_SCORING_PAIR                                                       "Error when scoring a pair '{0}'"
         map.put(86, SzException.class);                        // EAS_ERR_ERROR_WHEN_SCORING_SET                                                        "Error when scoring a set '{0}'"
         map.put(87, SzUnhandledException.class);               // EAS_ERR_SRD_EXCEPTION                                                                 "SRD Exception '{0}'"
         map.put(88, SzBadInputException.class);                // EAS_ERR_UNKNOWN_SEARCH_PROFILE_VALUE                                                  "Unknown search profile value '{0}'"
         map.put(89, SzConfigurationException.class);           // EAS_ERR_MISCONFIGURED_SEARCH_PROFILE_VALUE                                            "Misconfigured search profile value '{0}'"
         map.put(90, SzConfigurationException.class);           // EAS_ERR_CANNOT_ADD_LIBRARY_FEATURES_TO_DATASTORE                                      "Cannot add library features to datastore:  '{0}'"
         map.put(91, SzException.class);                        // EAS_ERR_TRUSTED_ID_FTYPE_MISSING                                                      "TRUSTED_ID Feature Type is not configured"
         map.put(92, SzException.class);                        // EAS_ERR_RECORD_TYPE_FTYPE_MISSING                                                     "RECORD_TYPE Feature Type is not configured"
         map.put(93, SzException.class);                        // EAS_ERR_CONFUSED_ENTTIY_FELEM_MISSING                                                 "YESNO_FLAG Feature Element is not configured"
         map.put(94, SzException.class);                        // EAS_ERR_DOMAIN_NAME_FELEM_MISSING                                                     "DOMAIN_NAME Feature Element is not configured"
         map.put(95, SzException.class);                        // EAS_ERR_SUPRESSED_RELATIONSHIP_FTYPE_ID_FELEM_MISSING                                 "SUPRESSED_RELATIONSHIP_FTYPE_ID Feature Element is not configured"
         map.put(96, SzException.class);                        // EAS_ERR_SUPRESSED_RELATIONSHIP_CONNECTING_FTYPE_ID_FELEM_MISSING                      "SUPRESSED_RELATIONSHIP_CONNECTING_FTYPE_ID Feature Element is not configured"
         map.put(999, SzLicenseException.class);                // EAS_ERR_LICENSE_HAS_EXPIRED                                                           "License has expired"
         map.put(1000, SzDatabaseException.class);              // EAS_ERR_UNHANDLED_DATABASE_ERROR                                                      "Unhandled Database Error '{0}'"
         map.put(1001, SzDatabaseException.class);              // EAS_ERR_CRITICAL_DATABASE_ERROR                                                       "Critical Database Error '{0}'"
         map.put(1002, SzDatabaseException.class);              // EAS_ERR_DATABASE_MEMORY_ERROR                                                         "Database Memory Error '{0}'"
         map.put(1003, SzDatabaseException.class);              // EAS_ERR_TABLE_SPACE_OR_LOG_VIOLATION                                                  "Table Space or Log Violation '{0}'"
         map.put(1004, SzDatabaseException.class);              // EAS_ERR_RESOURCE_CONTENTION                                                           "Resource Contention '{0}'"
         map.put(1005, SzDatabaseException.class);              // EAS_ERR_USER_DEFINED_PROC_ERROR                                                       "User Defined Procedure or Function Error '{0}'"
         map.put(1006, SzDatabaseConnectionLostException.class);  // EAS_ERR_DATABASE_CONNECTION_FAILURE                                                   "Database Connection Failure '{0}'"
         map.put(1007, SzDatabaseConnectionLostException.class);  // EAS_ERR_DATABASE_CONNECTION_LOST                                                      "Database Connection Lost '{0}'"
         map.put(1008, SzDatabaseTransientException.class);     // EAS_ERR_DEADLOCK_ERROR                                                                "Deadlock Error '{0}'"
         map.put(1009, SzDatabaseException.class);              // EAS_ERR_INSUFFICIENT_PERMISSIONS                                                      "Insufficient Permissions '{0}'"
         map.put(1010, SzDatabaseException.class);              // EAS_ERR_TRANSACTION_ERROR                                                             "Transaction Error '{0}'"
         map.put(1011, SzDatabaseException.class);              // EAS_ERR_UNIQUE_CONSTRAINT_VIOLATION                                                   "Unique Constraint Violation '{0}'"
         map.put(1012, SzDatabaseException.class);              // EAS_ERR_CONSTRAINT_VIOLATION                                                          "Constraint Violation '{0}'"
         map.put(1013, SzDatabaseException.class);              // EAS_ERR_SYNTAX_ERROR                                                                  "Syntax Error '{0}'"
         map.put(1014, SzDatabaseException.class);              // EAS_ERR_CURSOR_ERROR                                                                  "Cursor Error '{0}'"
         map.put(1015, SzDatabaseException.class);              // EAS_ERR_DATATYPE_ERROR                                                                "Data Type Error '{0}'"
         map.put(1016, SzDatabaseException.class);              // EAS_ERR_TRANSACTION_ABORTED_ERROR                                                     "Transaction Aborted '{0}'"
         map.put(1017, SzDatabaseException.class);              // EAS_ERR_DATABASE_OPERATOR_NOT_SET                                                     "Database operator not set '{0}'"
         map.put(1018, SzDatabaseException.class);              // EAS_ERR_DATABASE_EXCEPTION_GENERATOR_NOT_SET                                          "Database exception generator not set '{0}'"
         map.put(1019, SzConfigurationException.class);         // EAS_ERR_DATABASE_SCHEMA_TABLES_NOT_FOUND                                              "Datastore schema tables not found. [{0}]"
         map.put(2001, SzConfigurationException.class);         // EAS_ERR_FEATURE_HAS_NO_FTYPE_CODE                                                     "Cannot process feature with no FTYPE_CODE[{0}]"
         map.put(2002, SzException.class);                      // EAS_ERR_REQUESTED_CONFIG_FOR_INVALID_FTYPE_CODE                                       "Requested config for invalid FTYPE_CODE[{0}]"
         map.put(2003, SzException.class);                      // EAS_ERR_NO_FELEM_CODE                                                                 "Cannot process OBS_FELEM with no FELEM_CODE[{0}]"
         map.put(2005, SzException.class);                      // EAS_ERR_INVALID_FELEM_CODE                                                            "FELEM_CODE[{0}] is not configured for FTYPE_CODE[{1}]"
         map.put(2006, SzException.class);                      // EAS_ERR_MISSING_ENT_SRC_KEY                                                           "OBS_ENT is missing ENT_SRC_KEY"
         map.put(2007, SzException.class);                      // EAS_ERR_MISSING_OBS_SRC_KEY                                                           "OBS is missing OBS_SRC_KEY"
         map.put(2009, SzException.class);                      // EAS_ERR_NO_OBS_ENT_FOR_ENT_SRC_KEY                                                    "No OBS_ENT found for ENT_SRC_KEY[{0}]"
         map.put(2010, SzException.class);                      // EAS_ERR_ENT_SRC_KEY_CHANGED                                                           "Expected ENT_SRC_KEY [{0}] changed to [{1}]"
         map.put(2012, SzConfigurationException.class);         // EAS_ERR_ERRULE_CONFIGURED_FOR_RESOLVE_AND_RELATE                                      "ER Rule [{0}] is configured for both resolve and relate."
         map.put(2015, SzConfigurationException.class);         // EAS_ERR_INVALID_FTYPE_CODE                                                            "Invalid FTYPE_CODE[{0}]"
         map.put(2027, SzException.class);                      // EAS_ERR_PLUGIN_INIT                                                                   "Plugin initialization error {0}"
         map.put(2029, SzConfigurationException.class);         // EAS_ERR_REQUESTED_CONFIG_FOR_INVALID_PLUGIN                                           "Configuration not found for plugin type: {0}"
         map.put(2034, SzConfigurationException.class);         // EAS_ERR_INVALID_CFRTN_VAL                                                             "CFRTN_ID[{0}]/FTYPE[{1}] is expecting CFRTN_VAL[{2}] which is not offered by CFUNC_ID[{3}][{4}]. Available scores are [{5}]"
         map.put(2036, SzConfigurationException.class);         // EAS_ERR_FTYPE_HAS_NO_BOM                                                              "FType configured with no Feature Elements (Bill of Materials)  FTYPE_ID[{0}] FTYPE_CODE[{1}]"
         map.put(2037, SzConfigurationException.class);         // EAS_ERR_FUNC_CALL_HAS_NO_BOM                                                          "Function call ({3}) configured with no Bill of Materials  {4}[{0}] FTYPE_ID[{1}] FTYPE_CODE[{2}]"
         map.put(2038, SzConfigurationException.class);         // EAS_ERR_DISTINCT_FEATURE_HAS_NO_BOM                                                   "Distinct feature call configured with no Bill of Materials  DFCALL_ID[{0}]"
         map.put(2041, SzConfigurationException.class);         // EAS_ERR_EFCALL_HAS_NO_BOM                                                             "EFeature creation call configured with no Bill of Materials  EFCALL_ID[{0}]"
         map.put(2045, SzConfigurationException.class);         // EAS_ERR_CFRTN_REFERS_BAD_CFUNC_ID                                                     "CFG_CFRTN references CFUNC_ID[{0}] which is not configured"
         map.put(2047, SzConfigurationException.class);         // EAS_ERR_MISSING_DSRC_CODE                                                             "Observation is missing DSRC_CODE tag which is required"
         map.put(2048, SzConfigurationException.class);         // EAS_ERR_FEAT_FREQ_INVALID                                                             "FEATURE CODE[{0}] FEATURE FREQUENCY[{1}] is an invalid frequency"
         map.put(2049, SzConfigurationException.class);         // EAS_ERR_FUNC_INVALID                                                                  "{2} [{0}] is invalid for {3}[{1}]"
         map.put(2050, SzConfigurationException.class);         // EAS_ERR_QUAL_FRAG_NOT_FOUND                                                           "Rule[{0}] Qualifier Fragment[{1}]: Fragment not found"
         map.put(2051, SzConfigurationException.class);         // EAS_ERR_DISQUAL_FRAG_NOT_FOUND                                                        "Rule[{0}] Disqualifier Fragment[{1}]: Fragment not found"
         map.put(2057, SzBadInputException.class);              // EAS_ERR_BAD_DSRC_ACTION                                                               "Observation has DSRC_ACTION[{0}] which is invalid.  Valid values are [A]dd, [C]hange, [D]elete or E[X]tensive Evaluation"
         map.put(2061, SzConfigurationException.class);         // EAS_ERR_DUPLICATE_LOOKUP_IDENTIFIER                                                   "Duplicate [{0}] with identifier value [{1}].  Only unique values are allowed."
         map.put(2062, SzConfigurationException.class);         // EAS_ERR_INVALID_LOOKUP_IDENTIFIER                                                     "Requested lookup of [{0}] using unknown value [{1}].  Value not found."
         map.put(2065, SzConfigurationException.class);         // EAS_ERR_FTYPE_HAS_MULTIPLE_DEFINITIONS                                                "FType configured with multiple definitions. FTYPE_CODE[{0}] used in FTYPE_ID[{1}] and FTYPE_ID[{2}]"
         map.put(2066, SzConfigurationException.class);         // EAS_ERR_FELEM_HAS_MULTIPLE_DEFINITIONS                                                "FElem configured with multiple definitions. FELEM_CODE[{0}] used in FELEM_ID[{1}] and FELEM_ID[{2}]"
         map.put(2067, SzConfigurationException.class);         // EAS_ERR_ERFRAG_HAS_MULTIPLE_DEFINITIONS                                               "ER Fragment code configured with multiple definitions. ERFRAG_CODE[{0}] used in ERFRAG_ID[{1}] and ERFRAG_ID[{2}]"
         map.put(2069, SzConfigurationException.class);         // EAS_ERR_BOM_CONFIG_INVALID_FOR_SIMPLE_PLUGIN                                          "Configured plugin for CFCALL_ID[{0}] requires exactly one value in BOM"
         map.put(2070, SzConfigurationException.class);         // EAS_ERR_EFCALL_HAS_INVALID_FUNCTION                                                   "EFeature creation call configured with invalid function ID EFCALL_ID[{0}] EFUNC_ID[{1}]"
         map.put(2071, SzConfigurationException.class);         // EAS_ERR_EFBOM_HAS_INVALID_EFCALL                                                      "EFeature BOM configured with invalid EFCALL_ID[{0}]"
         map.put(2073, SzException.class);                      // EAS_ERR_LOADING_LIBRARY                                                               "Library loading error {0}"
         map.put(2074, SzException.class);                      // EAS_ERR_SCORING_MANAGER_PLUGIN                                                        "Scoring manager: id {0} and {1} do not match"
         map.put(2075, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_INVALID_FTYPE_CODE                                      "Table {0} configured with an invalid type FTYPE_CODE[{1}]"
         map.put(2076, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_INVALID_FELEM_CODE                                      "Table {0} configured with an invalid type FELEM_CODE[{1}]"
         map.put(2079, SzConfigurationException.class);         // EAS_ERR_EFBOM_CONFIGURED_WITH_INVALID_FTYPE_ID                                        "CFG_EFBOM configured with an invalid type FTYPE_ID[{0}]"
         map.put(2080, SzConfigurationException.class);         // EAS_ERR_EFBOM_CONFIGURED_WITH_INVALID_FELEM_ID                                        "CFG_EFBOM configured with an invalid type FELEM_ID[{0}]"
         map.put(2081, SzConfigurationException.class);         // EAS_ERR_FUNC_CALL_CONFIGURED_WITH_INVALID_FTYPE_ID                                    "{1} configured with an invalid type FTYPE_ID[{0}]"
         map.put(2082, SzConfigurationException.class);         // EAS_ERR_FUNC_CALL_CONFIGURED_WITH_INVALID_FUNC_ID                                     "{1} configured with an invalid type {2}[{0}]"
         map.put(2083, SzConfigurationException.class);         // EAS_ERR_FUNC_BOM_CONFIGURED_WITH_INVALID_FTYPE_ID                                     "{1} configured with an invalid type FTYPE_ID[{0}]"
         map.put(2084, SzConfigurationException.class);         // EAS_ERR_FUNC_BOM_CONFIGURED_WITH_INVALID_FELEM_ID                                     "{1} configured with an invalid type FELEM_ID[{0}]"
         map.put(2088, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_INVALID_RCLASS_ID                                       "Table {0} configured with an invalid RCLASS_ID[{1}]"
         map.put(2089, SzConfigurationException.class);         // EAS_ERR_UNKNOWN_FCLASS_ID                                                             "UNKNOWN FCLASS ID[{0}]"
         map.put(2090, SzConfigurationException.class);         // EAS_ERR_SFCALL_HAS_INVALID_FUNCTION                                                   "Feature standardization call configured with invalid function ID SFCALL_ID[{0}] SFUNC_ID[{1}]"
         map.put(2091, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_BOTH_FTYPE_ID_AND_FELEM_ID                              "{0} configured with both an FTYPE_ID[{1}] and FELEM_ID[{2}]"
         map.put(2092, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_NEITHER_FTYPE_ID_NOR_FELEM_ID                           "{0} configured with neither an FTYPE_ID nor an FELEM_ID"
         map.put(2093, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_DUPLICATE_EXEC_ORDER_FOR_IDENTIFIER_LIST                "Table [{0}] configured with duplicate execution order value [{3}] for identifiers[{1}] with values [{2}]"
         map.put(2094, SzConfigurationException.class);         // EAS_ERR_DUPLICATE_VALUE_FOR_FIELD_IN_TABLE                                            "Duplicate value [{2}] of field [{1}] in config [{0}]"
         map.put(2095, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_INVALID_FTYPE_CODE_FELEM_CODE_PAIR                      "Table {0} configured with an invalid FTYPE_CODE[{1}]/FELEM_CODE[{2}] pair"
         map.put(2097, SzException.class);                      // EAS_ERR_DUPLICATE_VALUES_FOR_FIELDS_IN_TABLE                                          "Duplicate values [{3}][{4}] of fields [{1}][{2}] in config [{0}]"
         map.put(2099, SzConfigurationException.class);         // EAS_ERR_COUNTER_CONFIG_INVALID_THRESHOLD                                              "Next Threshold for a counter should be no less than 10, but has NEXT_THRESH{0}"
         map.put(2101, SzConfigurationException.class);         // EAS_ERR_XPATH_OP_UNSUPPORTED                                                          "XPath operation unsupported [{0}]"
         map.put(2102, SzConfigurationException.class);         // EAS_ERR_XPATH_AXIS_UNSUPPORTED                                                        "XPath axis unsupported [{0}]"
         map.put(2103, SzConfigurationException.class);         // EAS_ERR_XPATH_TEST_UNSUPPORTED                                                        "XPath test unsupported [{0}]"
         map.put(2104, SzConfigurationException.class);         // EAS_ERR_XPATH_TYPE_UNSUPPORTED                                                        "XPath type unsupported [{0}]"
         map.put(2105, SzConfigurationException.class);         // EAS_ERR_XPATH_NODE_PREFIX_UNSUPPORTED                                                 "XPath node prefix unsupported [{0}]"
         map.put(2106, SzConfigurationException.class);         // EAS_ERR_XPATH_NODE_NAME_UNSUPPORTED                                                   "XPath node name unsupported position[{0}], name[{1}]"
         map.put(2107, SzConfigurationException.class);         // EAS_ERR_XPATH_BEHAVIOR_TYPE_UNSUPPORTED                                               "XPath behavior type unsupported [{0}]"
         map.put(2108, SzConfigurationException.class);         // EAS_ERR_XPATH_BUCKET_UNSUPPORTED                                                      "XPath bucket type unsupported [{0}]"
         map.put(2109, SzConfigurationException.class);         // EAS_ERR_XPATH_VALUE_TYPE_UNSUPPORTED                                                  "XPath value type unsupported [{0}]"
         map.put(2110, SzConfigurationException.class);         // EAS_ERR_XPATH_PLUS_TYPE_UNSUPPORTED                                                   "XPath plus operand type unsupported [{0}]"
         map.put(2111, SzConfigurationException.class);         // EAS_ERR_XPATH_FRAGMENT_NOT_EVALUATED                                                  "XPath fragment not evaluated[{0}]"
         map.put(2112, SzConfigurationException.class);         // EAS_ERR_XPATH_FRAGMENT_NOT_CONFIGURED                                                 "XPath fragment not configured[{0}]"
         map.put(2113, SzConfigurationException.class);         // EAS_ERR_XPATH_FUNCTION_UNSUPPORTED                                                    "XPath function unsupported [{0}]"
         map.put(2114, SzConfigurationException.class);         // EAS_ERR_INVALID_FTYPE_SCORESET                                                        "Cannot set score for invalid FTYPE_ID [{0}]"
         map.put(2116, SzException.class);                      // EAS_ERR_UNINITIALIZED_AMBIGUOUS_CACHE                                                 "Uninitialized Ambiguous Test Cache"
         map.put(2117, SzConfigurationException.class);         // EAS_ERR_SCORING_CALL_HAS_NO_BOM                                                       "Scoring call configured with no Bill of Materials  CFCALL_ID[{0}]."
         map.put(2118, SzConfigurationException.class);         // EAS_ERR_BOM_CONFIG_INVALID_FOR_SCORING_PLUGIN                                         "Configured plugin for CFCALL_ID[{0}] has invalid BOM."
         map.put(2120, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_INVALID_FTYPE_ID                                        "Table {0} configured with an invalid type FTYPE_ID[{1}]"
         map.put(2121, SzConfigurationException.class);         // EAS_ERR_TABLE_CONFIGURED_WITH_INVALID_FELEM_ID                                        "Table {0} configured with an invalid type FELEM_ID[{1}]"
         map.put(2123, SzConfigurationException.class);         // EAS_ERR_CFUNC_CONFIGURED_WITH_NO_CFRTN                                                "CFG_CFUNC [{0}] feature type [{1}] configured without any corresponding return values in CFG_CFRTN"
         map.put(2131, SzConfigurationException.class);         // EAS_ERR_OBS_ENT_NOT_FOUND                                                             "Requested resolution of OBS_ENT_ID that is not loaded OBS_ENT_ID[{0}]"
         map.put(2135, SzConfigurationException.class);         // EAS_ERR_INPUT_MAPPING_CONFIG_ERROR                                                    "Error in input mapping config[{0}]"
         map.put(2136, SzConfigurationException.class);         // EAS_ERR_INPUT_MAPPING_MISSING_REQUIRED_FIELD                                          "Error in input mapping, missing required field[{0}]"
         map.put(2137, SzConfigurationException.class);         // EAS_ERR_INPUT_MAPPING_MALFORMED_INPUT                                                 "Error in input mapping, input message is malformed[{0}]"
         map.put(2138, SzConfigurationException.class);         // EAS_ERR_INVALID_CFRTN_INDEX                                                           "CFRTN_ID[{0}] is out of range. Valid range is 0-7"
         map.put(2139, SzConfigurationException.class);         // EAS_ERR_DSRC_INTEREST_CONFIGURED_WITH_INVALID_DSRCID                                  "Data Source Interest configured with invalid Data Source ID DSRC_ID[{0}]"
         map.put(2207, SzUnknownDataSourceException.class);     // EAS_ERR_DATA_SOURCE_CODE_DOES_NOT_EXIST                                               "Data source code [{0}] does not exist."
         map.put(2209, SzConfigurationException.class);         // EAS_ERR_DATA_SOURCE_ID_ALREADY_EXISTS                                                 "Data source ID [{0}] already exists."
         map.put(2210, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_DOES_NOT_EXIST                                                     "Feature element code [{0}] does not exist."
         map.put(2211, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_ALREADY_EXISTS                                                     "Feature element code [{0}] already exists."
         map.put(2212, SzConfigurationException.class);         // EAS_ERR_FELEM_ID_ALREADY_EXISTS                                                       "Feature element ID [{0}] already exists."
         map.put(2213, SzConfigurationException.class);         // EAS_ERR_INVALID_FELEM_DATA_TYPE                                                       "Invalid feature element datatype [{0}] found.  Datatype must be in [{1}]."
         map.put(2214, SzConfigurationException.class);         // EAS_ERR_FELEM_IS_CONFIGURED_FOR_USE_IN_FEATURES                                       "Feature element [{0}] is configured for use in feature(s) [{1}]."
         map.put(2215, SzConfigurationException.class);         // EAS_ERR_FTYPE_CODE_DOES_NOT_EXIST                                                     "Feature type code [{0}] does not exist."
         map.put(2216, SzConfigurationException.class);         // EAS_ERR_FTYPE_CODE_ALREADY_EXISTS                                                     "Feature type code [{0}] already exists."
         map.put(2217, SzConfigurationException.class);         // EAS_ERR_FTYPE_ID_ALREADY_EXISTS                                                       "Feature type ID [{0}] already exists."
         map.put(2218, SzConfigurationException.class);         // EAS_ERR_FEATURE_FREQUENCY_IS_INVALID                                                  "Feature type frequency [{0}] is invalid."
         map.put(2219, SzConfigurationException.class);         // EAS_ERR_FEATURE_ELEMENT_LIST_IS_EMPTY                                                 "Feature element list is empty."
         map.put(2220, SzConfigurationException.class);         // EAS_ERR_STANDARDIZATION_FUNCTION_DOES_NOT_EXIST                                       "Standardization function [{0}] does not exist."
         map.put(2221, SzConfigurationException.class);         // EAS_ERR_FUNCTION_USES_BOTH_FTYPE_AND_FELEM_TRIGGER                                    "Function call requested uses both triggering feature type [{0}] and triggering feature element code [{1}].  Cannot use both triggering feature type and triggering feature element code."
         map.put(2222, SzConfigurationException.class);         // EAS_ERR_EXPRESSION_FUNCTION_DOES_NOT_EXIST                                            "Expression function [{0}] does not exist."
         map.put(2223, SzConfigurationException.class);         // EAS_ERR_EXPRESSION_FUNCTION_FEATURE_ELEMENT_LIST_IS_EMPTY                             "Expression function feature element list is empty."
         map.put(2224, SzConfigurationException.class);         // EAS_ERR_COMPARISON_FUNCTION_DOES_NOT_EXIST                                            "Comparison function [{0}] does not exist."
         map.put(2225, SzConfigurationException.class);         // EAS_ERR_COMPARISON_FUNCTION_FEATURE_ELEMENT_LIST_IS_EMPTY                             "Comparison function feature element list is empty."
         map.put(2226, SzConfigurationException.class);         // EAS_ERR_DISTINCT_FUNCTION_DOES_NOT_EXIST                                              "Distinct feature function [{0}] does not exist."
         map.put(2227, SzConfigurationException.class);         // EAS_ERR_DISTINCT_FUNCTION_FEATURE_ELEMENT_LIST_IS_EMPTY                               "Distinct feature function feature element list is empty."
         map.put(2228, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_MUST_BE_UNIQUE_IN_FELEM_LIST                                       "Feature element code [{0}] must be unique in felem list."
         map.put(2230, SzConfigurationException.class);         // EAS_ERR_FTYPE_CODE_AND_FELEM_CODE_MUST_BE_UNIQUE_IN_EXPRESSED_FUNCTION_CALL           "Feature type [{0}] and feature element [{1}] must be unique in expressed feature function call."
         map.put(2231, SzConfigurationException.class);         // EAS_ERR_FTYPE_CODE_AND_FELEM_CODE_IN_EXPRESSED_FUNCTION_CALL_DO_NOT_EXIST_IN_FEATURE  "Feature type [{0}] and feature element [{1}] requested for expressed feature function call, but don't exist in feature [{0}]."
         map.put(2232, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_MUST_BE_UNIQUE_IN_COMPARISON_FUNCTION_CALL                         "Feature element [{0}] must be unique in comparison feature function call."
         map.put(2233, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_IN_COMPARISON_FUNCTION_CALL_DOES_NOT_EXIST_IN_FEATURE              "Feature element [{0}] requested for comparison feature function call, but doesn't exist in feature [{1}]."
         map.put(2234, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_MUST_BE_UNIQUE_IN_DISTINCT_FUNCTION_CALL                           "Feature element [{0}] must be unique in distinct feature function call."
         map.put(2235, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_IN_DISTINCT_FUNCTION_CALL_DOES_NOT_EXIST_IN_FEATURE                "Feature element [{0}] requested for distinct feature function call, but doesn't exist in feature [{1}]."
         map.put(2236, SzConfigurationException.class);         // EAS_ERR_EXEC_ORDER_IS_NOT_SPECIFIED_FOR_FUNCTION                                      "Exec order not specified for function."
         map.put(2237, SzConfigurationException.class);         // EAS_ERR_SFCALL_ID_ALREADY_EXISTS                                                      "Standardization function call ID [{0}] already exists."
         map.put(2238, SzConfigurationException.class);         // EAS_ERR_EFCALL_ID_ALREADY_EXISTS                                                      "Expression function call ID [{0}] already exists."
         map.put(2239, SzConfigurationException.class);         // EAS_ERR_CFCALL_ID_ALREADY_EXISTS                                                      "Comparison function call ID [{0}] already exists."
         map.put(2240, SzConfigurationException.class);         // EAS_ERR_DFCALL_ID_ALREADY_EXISTS                                                      "Distinct feature function call ID [{0}] already exists."
         map.put(2241, SzConfigurationException.class);         // EAS_ERR_FTYPE_CODE_REQUIRED_BY_SEPARATE_EXPRESSED_FUNCTION_CALL                       "Feature type [{0}] required for separate expressed feature function call [{1}]."
         map.put(2242, SzConfigurationException.class);         // EAS_ERR_SFCALL_ID_DOES_NOT_EXIST                                                      "Standardization function call ID [{0}] does not exist."
         map.put(2243, SzConfigurationException.class);         // EAS_ERR_EFCALL_ID_DOES_NOT_EXIST                                                      "Expression function call ID [{0}] does not exist."
         map.put(2244, SzConfigurationException.class);         // EAS_ERR_CFCALL_ID_DOES_NOT_EXIST                                                      "Comparison function call ID [{0}] does not exist."
         map.put(2245, SzConfigurationException.class);         // EAS_ERR_DFCALL_ID_DOES_NOT_EXIST                                                      "Distinct feature function call ID [{0}] does not exist."
         map.put(2246, SzConfigurationException.class);         // EAS_ERR_BOM_EXEC_ORDER_ALREADY_EXISTS                                                 "BOM exec order value [{0}] already exists."
         map.put(2247, SzConfigurationException.class);         // EAS_ERR_COMPARISON_FUNCTION_CALL_DOES_NOT_EXIST_FOR_FEATURE                           "Comparison function call does not exist for feature [{0}]."
         map.put(2248, SzConfigurationException.class);         // EAS_ERR_DISTINCT_FUNCTION_CALL_DOES_NOT_EXIST_FOR_FEATURE                             "Distinct feature function call does not exist for feature [{0}]."
         map.put(2249, SzConfigurationException.class);         // EAS_ERR_CONFLICTING_SPECIFIERS_FOR_FUNCTION_CALL                                      "Conflicting specifiers: Function call ID [{0}] does not match function call ID [{1}] from feature type."
         map.put(2250, SzConfigurationException.class);         // EAS_ERR_ATTR_CODE_DOES_NOT_EXIST                                                      "Attribute code [{0}] does not exist."
         map.put(2251, SzConfigurationException.class);         // EAS_ERR_ATTR_CODE_ALREADY_EXISTS                                                      "Attribute code [{0}] already exists."
         map.put(2252, SzConfigurationException.class);         // EAS_ERR_ATTR_ID_ALREADY_EXISTS                                                        "Attribute ID [{0}] already exists."
         map.put(2253, SzConfigurationException.class);         // EAS_ERR_ATTR_CLASS_CODE_DOES_NOT_EXIST                                                "Attribute class code [{0}] does not exist."
         map.put(2254, SzConfigurationException.class);         // EAS_ERR_FUNCTION_USES_NEITHER_FTYPE_NOR_FELEM_TRIGGER                                 "Function call requested uses neither triggering feature type [{0}] nor triggering feature element code [{1}].  At least one trigger must be specified."
         map.put(2255, SzConfigurationException.class);         // EAS_ERR_FEATURE_CLASS_CODE_DOES_NOT_EXIST                                             "Feature class code [{0}] does not exist."
         map.put(2256, SzConfigurationException.class);         // EAS_ERR_RELATIONSHIP_TYPE_CODE_DOES_NOT_EXIST                                         "Relationship type code [{0}] does not exist."
         map.put(2257, SzConfigurationException.class);         // EAS_ERR_FELEM_CODE_NOT_IN_FEATURE                                                     "Feature element code [{0}] not included in feature[{1}]."
         map.put(2258, SzConfigurationException.class);         // EAS_ERR_ER_FRAGMENT_DOES_NOT_EXIST                                                    "ER fragment code [{0}] does not exist."
         map.put(2259, SzConfigurationException.class);         // EAS_ERR_ER_RULE_DOES_NOT_EXIST                                                        "ER rule code [{0}] does not exist."
         map.put(2260, SzConfigurationException.class);         // EAS_ERR_ERFRAG_ID_ALREADY_EXISTS                                                      "ER fragment ID [{0}] already exists."
         map.put(2261, SzConfigurationException.class);         // EAS_ERR_ERRULE_ID_ALREADY_EXISTS                                                      "ER rule ID [{0}] already exists."
         map.put(2262, SzConfigurationException.class);         // EAS_ERR_ERFRAG_CODE_ALREADY_EXISTS                                                    "ER fragment code [{0}] already exists."
         map.put(2263, SzConfigurationException.class);         // EAS_ERR_ERRULE_CODE_ALREADY_EXISTS                                                    "ER rule code [{0}] already exists."
         map.put(2264, SzConfigurationException.class);         // EAS_ERR_ERFRAG_CODE_DOES_NOT_EXIST                                                    "ER fragment code [{0}] does not exist."
         map.put(2266, SzConfigurationException.class);         // EAS_ERR_ERFRAG_CODE_MUST_BE_UNIQUE_IN_DEPENDENCY_LIST                                 "ER fragment code [{0}] must be unique in dependency list."
         map.put(2267, SzConfigurationException.class);         // EAS_ERR_SECTION_NAME_ALREADY_EXISTS                                                   "Section name [{0}] already exists."
         map.put(2268, SzConfigurationException.class);         // EAS_ERR_SECTION_NAME_DOES_NOT_EXIST                                                   "Section name [{0}] does not exist."
         map.put(2269, SzConfigurationException.class);         // EAS_ERR_SECTION_FIELD_NAME_ALREADY_EXISTS                                             "Section field name [{0}] already exists."
         map.put(2270, SzConfigurationException.class);         // EAS_ERR_SFUNC_ID_ALREADY_EXISTS                                                       "Feature standardization function ID [{0}] already exists."
         map.put(2271, SzConfigurationException.class);         // EAS_ERR_SFUNC_CODE_ALREADY_EXISTS                                                     "Feature standardization function code [{0}] already exists."
         map.put(2272, SzConfigurationException.class);         // EAS_ERR_EFUNC_ID_ALREADY_EXISTS                                                       "Feature expression function ID [{0}] already exists."
         map.put(2273, SzConfigurationException.class);         // EAS_ERR_EFUNC_CODE_ALREADY_EXISTS                                                     "Feature expression function code [{0}] already exists."
         map.put(2274, SzConfigurationException.class);         // EAS_ERR_CFUNC_ID_ALREADY_EXISTS                                                       "Feature comparison function ID [{0}] already exists."
         map.put(2275, SzConfigurationException.class);         // EAS_ERR_CFUNC_CODE_ALREADY_EXISTS                                                     "Feature comparison function code [{0}] already exists."
         map.put(2276, SzConfigurationException.class);         // EAS_ERR_DFUNC_ID_ALREADY_EXISTS                                                       "Feature distinct function ID [{0}] already exists."
         map.put(2277, SzConfigurationException.class);         // EAS_ERR_DFUNC_CODE_ALREADY_EXISTS                                                     "Feature distinct function code [{0}] already exists."
         map.put(2278, SzConfigurationException.class);         // EAS_ERR_COMPATIBILITY_VERSION_NOT_FOUND_IN_CONFIG                                     "Compatibility version not found in document."
         map.put(2279, SzConfigurationException.class);         // EAS_ERR_CFRTN_ID_ALREADY_EXISTS                                                       "Feature comparison function return ID [{0}] already exists."
         map.put(2280, SzConfigurationException.class);         // EAS_ERR_CFUNC_CODE_DOES_NOT_EXIST                                                     "Feature comparison function code [{0}] does not exist."
         map.put(2281, SzConfigurationException.class);         // EAS_ERR_CFRTN_VALUE_ALREADY_EXISTS                                                    "Feature comparison function return value [{0}] already exists for comparison function [{1}] ftype [{2}]."
         map.put(2282, SzConfigurationException.class);         // EAS_ERR_CFUNC_EXEC_ORDER_ALREADY_EXISTS                                               "Feature comparison function exec order value [{0}] already exists for comparison function [{1}] ftype [{2}]."
         map.put(2283, SzConfigurationException.class);         // EAS_ERR_EFUNC_CODE_DOES_NOT_EXIST                                                     "Feature expression function code [{0}] does not exist."
         map.put(2285, SzException.class);                      // EAS_ERR_INVALID_FORMAT_FOR_ENTITIES                                                   "Invalid format for ENTITIES."
         map.put(2286, SzException.class);                      // EAS_ERR_NO_ENTITY_ID_FOUND_FOR_ENTITY                                                 "No entity ID found for entity."
         map.put(2287, SzException.class);                      // EAS_ERR_NO_DATA_SOURCE_FOUND                                                          "No data source found."
         map.put(2288, SzException.class);                      // EAS_ERR_NO_RECORD_ID_FOUND                                                            "No record ID found."
         map.put(2289, SzConfigurationException.class);         // EAS_ERR_INVALID_FEATURE_CLASS_FOR_FEATURE_TYPE                                        "Invalid feature class [{0}] for feature type [{1}]."
         map.put(2290, SzConfigurationException.class);         // EAS_ERR_FRAGMENT_IS_CONFIGURED_FOR_USE_IN_RULES                                       "Rule fragment [{0}] is configured for use in rules(s) [{1}]."
         map.put(2291, SzConfigurationException.class);         // EAS_ERR_FRAGMENT_IS_CONFIGURED_FOR_USE_IN_FRAGMENT                                    "Rule fragment [{0}] is configured for use in fragments(s) [{1}]."
         map.put(2292, SzException.class);                      // EAS_ERR_CANT_RETRIEVE_OBS_FEATURE_DATA_FOR_OBS_ENT                                    "Could not retrieve observed feature data for observed entity [{0}]."
         map.put(2293, SzException.class);                      // EAS_ERR_NO_RECORDS_SPECIFIED                                                          "No records specified."
         map.put(2294, SzException.class);                      // EAS_ERR_DATA_SOURCE_ID_DOES_NOT_EXIST                                                 "Data source ID [{0}] does not exist."
         map.put(3011, SzException.class);                      // EAS_ERR_DELETE_WITH_RESOLVE_ONLY                                                      "Cannot delete an entity with type RESOLVE_ONLY"
         map.put(3101, SzException.class);                      // EAS_ERR_INVALID_SESSION_HANDLE                                                        "Invalid Session Handle [{0}]"
         map.put(3102, SzException.class);                      // EAS_ERR_INVALID_REPORT_HANDLE                                                         "Invalid Report Handle [{0}]"
         map.put(3103, SzException.class);                      // EAS_ERR_INVALID_EXPORT_HANDLE                                                         "Invalid Export Handle [{0}]"
         map.put(3104, SzException.class);                      // EAS_ERR_INVALID_CONFIG_HANDLE                                                         "Invalid Config Handle [{0}]"
         map.put(3110, SzException.class);                      // EAS_ERR_RESPONSE_MESSAGE_SIZE_LARGER_THAN_BUFFER_SIZE                                 "Response message size [{0}] is larger than buffer size [{1}]"
         map.put(3111, SzException.class);                      // EAS_ERR_RESPONSE_RESIZE_FUNCTION_IS_NOT_PROVIDED                                      "Resize function is not provided"
         map.put(3112, SzException.class);                      // EAS_ERR_RESPONSE_RESIZE_FUNCTION_GAVE_INVALID_RESULT                                  "Resize function returned an invalid result"
         map.put(3121, SzBadInputException.class);              // EAS_ERR_JSON_PARSING_FAILURE                                                          "JSON Parsing Failure [code={0},offset={1}]"
         map.put(3122, SzBadInputException.class);              // EAS_ERR_JSON_PARSING_FAILURE_MUST_BE_OBJECT_OR_ARRAY                                  "JSON Parsing Failure.  JSON must be object or array."
         map.put(3123, SzBadInputException.class);              // EAS_ERR_JSON_PARSING_FAILURE_OBJECT_HAS_DUPLICATE_KEYS                                "Json object has duplicate keys."
         map.put(3131, SzBadInputException.class);              // EAS_ERR_UNKNOWN_COLUMN_REQUESTED_FOR_CSV_EXPORT                                       "Invalid column [{0}] requested for CSV export."
         map.put(7209, SzConfigurationException.class);         // EAS_ERR_DB_BAD_BACKEND_TYPE                                                           "Invalid [SQL] Backend Parameter. Valid values are SQL or HYBRID"
         map.put(7211, SzConfigurationException.class);         // EAS_ERR_DB_BAD_CLUSTER_SIZE                                                           "Cluster [{0}] is configured with an invalid size. Size must be equal to 1."
         map.put(7212, SzConfigurationException.class);         // EAS_ERR_DB_BAD_CLUSTER_NODE                                                           "Cluster [{0}] Node [{1}] is not configured."
         map.put(7216, SzConfigurationException.class);         // EAS_ERR_DB_BAD_CLUSTER_DEFINITION                                                     "Cluster [{0}] is not properly configured"
         map.put(7217, SzConfigurationException.class);         // EAS_ERR_DB_CONFLICTING_DEFAULT_SHARD_CONFIG                                           "Cannot specify both default backend database and default backend cluster"
         map.put(7218, SzConfigurationException.class);         // EAS_ERR_DB_CLUSTER_DOES_NOT_EXIST                                                     "Cluster [{0}] does not exist"
         map.put(7220, SzConfigurationException.class);         // EAS_ERR_NO_CONFIG_REGISTERED_IN_DATASTORE                                             "No engine configuration registered in datastore (see https://senzing.zendesk.com/hc/en-us/articles/360036587313)."
         map.put(7221, SzConfigurationException.class);         // EAS_ERR_NO_CONFIG_REGISTERED_FOR_DATA_ID                                              "No engine configuration registered with data ID [{0}]."
         map.put(7222, SzException.class);                      // EAS_ERR_FAILED_TO_SET_SYS_VAR_IN_DATASTORE                                            "Could not set system variable value in database for Group[{0}],Code[{1}],Value[{2}]."
         map.put(7223, SzConfigurationException.class);         // EAS_ERR_INVALID_SCHEMA_VERSION_IN_DATASTORE                                           "Invalid version number for datastore schema [version '{0}']."
         map.put(7224, SzConfigurationException.class);         // EAS_ERR_INVALID_SCHEMA_VERSION_IN_ENGINE                                              "Invalid version number for engine schema [version '{0}']."
         map.put(7226, SzConfigurationException.class);         // EAS_ERR_INCOMPATIBLE_DATASTORE_SCHEMA_VERSION                                         "Incompatible datastore schema version: [Engine version '{0}'.  Datastore version '{1}' is installed, but must be between '{2}' and '{3}'.]"
         map.put(7227, SzConfigurationException.class);         // EAS_ERR_CONFLICTING_SCHEMA_VERSIONS_IN_DATASTORE                                      "Conflicting version numbers for datastore schema [{0}]."
         map.put(7228, SzConfigurationException.class);         // EAS_ERR_INVALID_SCHEMA_VERSION                                                        "Invalid schema version number [version '{0}']."
         map.put(7230, SzConfigurationException.class);         // EAS_ERR_ENGINE_CONFIGURATION_FILE_NOT_FOUND                                           "Engine configuration file not found [{0}]."
         map.put(7232, SzConfigurationException.class);         // EAS_ERR_ENGINE_CONFIGURATION_NOT_FOUND                                                "No engine configuration found."
         map.put(7233, SzConfigurationException.class);         // EAS_ERR_DATASTORE_ENCRYPTION_SIGNATURE_IS_INCOMPATIBLE                                "Datastore encryption signature is not compatible."
         map.put(7234, SzConfigurationException.class);         // EAS_ERR_FAILED_TO_GET_ENCRYPTION_SIGNATURE                                            "Failed to get encryption signature: '{0}'"
         map.put(7235, SzConfigurationException.class);         // EAS_ERR_FTYPE_CONFIGURED_AS_REL_BUT_NO_RTYPE                                          "FTYPE_CODE[{0}] IS CONFIGURED AS A RELATIONSHIP FEATURE TYPE BUT RTYPE_ID IS NOT SET."
         map.put(7236, SzConfigurationException.class);         // EAS_ERR_DUPLICATE_BEHAVIOR_OVERRIDE_KEY_IN_CFG_FBOVR                                  "Duplicate behavior override keys in CFG_FBOVR -- FTYPE_ID[{0}], UTYPE_CODE[{1}] referenced in CFG_FBOVR."
         map.put(7237, SzConfigurationException.class);         // EAS_ERR_UNKNOWN_FTYPE_IN_TABLE                                                        "Unknown FTYPE_ID[{0}] referenced in {1}."
         map.put(7238, SzException.class);                      // EAS_ERR_DATASTORE_ENCRYPTION_CONFIGURATION_DOES_NOT_MATCH_DATASTORE                   "Datastore encryption configuration does not match data store:  '{0}'"
         map.put(7239, SzConfigurationException.class);         // EAS_ERR_INVALID_GENERIC_THRESHOLD_CANDIDATE_CAP                                       "Invalid generic threshold {0} cap [{1}] for [GPLAN_ID[{2}], BEHAVIOR[{3}], FTYPE_ID[{4}]]."
         map.put(7240, SzConfigurationException.class);         // EAS_ERR_INCORRECT_BEHAVIOR_REFERENCED                                                 "Incorrect BEHAVIOR[{0}] referenced in CFG_GENERIC_THRESHOLD for [GPLAN_ID[{1}], FTYPE_ID[{2}]].  FType configured for behavior [{3}]"
         map.put(7241, SzConfigurationException.class);         // EAS_ERR_UNKNOWN_GPLAN_IN_TABLE                                                        "Unknown GPLAN_ID[{0}] referenced in {1}."
         map.put(7242, SzConfigurationException.class);         // EAS_ERR_MULTIPLE_GENERIC_THRESHOLD_DEFINITIONS                                        "Multiple Generic Threshold definitions for [GPLAN_ID[{0}], BEHAVIOR[{1}], FTYPE_ID[{2}]]."
         map.put(7243, SzConfigurationException.class);         // EAS_ERR_ER_FRAGMENT_HAS_UNDEFINED_DEPENDENT_FRAGMENTS                                 "ER Fragment [{0}] configured with undefined dependent fragments. Fragment [{1}] undefined."
         map.put(7244, SzConfigurationException.class);         // EAS_ERR_ER_RULE_FRAGMENT_LACKS_REQUIRED_FRAGMENT                                      "ER Rule Fragment configuration lacks the required {0} fragment."
         map.put(7245, SzReplaceConflictException.class);       // EAS_ERR_CURRENT_CONFIG_REGISTERED_DOES_NOT_MATCH_DATA_ID                              "Current configuration ID does not match specified data ID [{0}]."
         map.put(7246, SzConfigurationException.class);         // EAS_ERR_INVALID_MAXIMUM_DATASTORE_SCHEMA_VERSION                                      "Invalid maximum datastore version number for engine schema [version '{0}']."
         map.put(7247, SzConfigurationException.class);         // EAS_ERR_INVALID_MINIMUM_DATASTORE_SCHEMA_VERSION                                      "Invalid minimum datastore version number for engine schema [version '{0}']."
         map.put(7303, SzBadInputException.class);              // EAS_ERR_MANDATORY_SEGMENT_WITH_MISSING_REQUIREMENTS                                   "Mandatory segment with missing requirements:"
         map.put(7305, SzBadInputException.class);              // EAS_ERR_MISSING_JSON_ROOT_ELEMENT                                                     "No root element name in json TEMPLATE"
         map.put(7313, SzBadInputException.class);              // EAS_ERR_REQUIRED_ELEMENT_WITH_EMPTY_FIELD                                             "A non-empty value for [{0}] must be specified."
         map.put(7314, SzBadInputException.class);              // EAS_ERR_REQUIRED_ELEMENT_NOT_FOUND                                                    "A value for [{0}] must be specified."
         map.put(7317, SzConfigurationException.class);         // EAS_ERR_FAILED_TO_OPEN_FILE                                                           "Failed to open file: {0}"
         map.put(7344, SzConfigurationException.class);         // EAS_ERR_UNKNOWN_MAPPING_DIRECTIVE                                                     "Invalid mapping directive [{0}] for attribute [{1}]."
         map.put(7426, SzBadInputException.class);              // EAS_ERR_XLITERATOR_FAILED                                                             "Transliteration failed"
         map.put(7511, SzException.class);                      // EAS_ERR_ABORT_ER_AND_RETRY                                                            "Detected change in candidate entity[{0}].  Restarting ER evaluation."
         map.put(8000, SzBadInputException.class);              // EAS_ERR_GNRNP                                                                         "GNR NameParser Failure"
         map.put(8410, SzException.class);                      // EAS_ERR_UNINITIALIZED_AMBIGUOUS_FEATURE                                               "Cannot use uninitialized ambiguous feature."
         map.put(8501, SzConfigurationException.class);         // EAS_ERR_SALT_DIGEST_ALGORITHM_NOT_AVAILABLE                                           "Failed to get {0} digest algorithm from ICC."
         map.put(8502, SzException.class);                      // EAS_ERR_SALT_DIGEST_CONTEXT_CREATE_FAILED                                             "Failed to create a digest context."
         map.put(8503, SzException.class);                      // EAS_ERR_SALT_DIGEST_CONTEXT_INIT_FAILED                                               "Failed {0} to initialise a digest context."
         map.put(8504, SzException.class);                      // EAS_ERR_SALT_DIGEST_FAILED                                                            "Failed {0} to digest block {1}."
         map.put(8505, SzException.class);                      // EAS_ERR_SALT_DIGEST_FINAL_FAILED                                                      "Failed {0} to complete digest."
         map.put(8508, SzException.class);                      // EAS_ERR_SALT_DIGEST_UNKNOWN_EXCEPTION                                                 "Unrecognized exception thrown generating digest."
         map.put(8509, SzException.class);                      // EAS_ERR_SALT_DIGEST_ALGORITHM_REQUIRED                                                "Cannot generate a digest without a valid algorithm."
         map.put(8514, SzException.class);                      // EAS_ERR_SALT_RANDOM_FAILED                                                            "Failed {0} to get random content"
         map.put(8516, SzConfigurationException.class);         // EAS_ERR_SALT_MUST_BE_SIZE                                                             "A salt value must be {0} bytes long but the provided one is {1} bytes."
         map.put(8517, SzConfigurationException.class);         // EAS_ERR_SALT_DOES_NOT_MATCH_CHECKSUM                                                  "The salt value does not match the recorded checksum."
         map.put(8520, SzException.class);                      // EAS_ERR_SALT_G2SS_INIT_FAILED                                                         "Secure Store initialization failed."
         map.put(8521, SzException.class);                      // EAS_ERR_SALT_G2SS_TOKEN_MUST_BE_INIT                                                  "Hashing with a named salt requires the Secure Store to be initialized."
         map.put(8522, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_SOPIN_NOT_VALID                                                     "The Security Officer (SO) PIN is not correct."
         map.put(8524, SzException.class);                      // EAS_ERR_SALT_G2SS_INIT_UNKNOWN_EXCEPTION                                              "Secure Store initialization failed with an unrecognized exception"
         map.put(8525, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_LOAD                                                   "Secure Store is required to load salt"
         map.put(8526, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_GENERATE                                               "Secure Store is required to generate salt"
         map.put(8527, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_IMPORT                                                 "Secure Store is required to import salt"
         map.put(8528, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_EXPORT                                                 "Secure Store is required to export salt"
         map.put(8529, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_DELETE                                                 "Secure Store is required to delete salt"
         map.put(8530, SzException.class);                      // EAS_ERR_SALT_CANNOT_OVERWRITE                                                         "You cannot overwrite an existing salt called {0}"
         map.put(8536, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_LEGACY                                                 "Secure Store is required to add a legacy salt"
         map.put(8538, SzConfigurationException.class);         // EAS_ERR_SALT_G2SS_REQUIRED_FOR_METHOD                                                 "Secure Store is required to change hashing method"
         map.put(8539, SzException.class);                      // EAS_ERR_SALT_G2SS_ERROR_CHANGING_METHOD                                               "Secure Store error changing hashing method"
         map.put(8540, SzConfigurationException.class);         // EAS_ERR_SALT_WRONG_SIZE                                                               "The object called {0} is not a salt"
         map.put(8541, SzException.class);                      // EAS_ERR_SALT_BASE64_DECODE_ERROR                                                      "Base64 decoding error in salt {0} at character {1}"
         map.put(8542, SzException.class);                      // EAS_ERR_SALT_UNINITIALIZED                                                            "Must load a salt before using it."
         map.put(8543, SzConfigurationException.class);         // EAS_ERR_SALT_NOT_FOUND                                                                "There is no salt called {0} in the Secure Store."
         map.put(8544, SzConfigurationException.class);         // EAS_ERR_SALT_PASSWORD_NOT_STRONG_ENOUGH                                               "The password must be stronger: {0}"
         map.put(8545, SzConfigurationException.class);         // EAS_ERR_SALT_ADMIN_NAME_REQUIRED                                                      "Specify -name and the name to use for the salt"
         map.put(8556, SzConfigurationException.class);         // EAS_ERR_SALT_ADMIN_METHOD_NOT_RECOGNISED                                              "Hashing method {0} not supported."
         map.put(8557, SzConfigurationException.class);         // EAS_ERR_SALT_METHOD_DOES_NOT_MATCH                                                    "The hashing method in the configuration ({1}) does not match the method ({2}) of the salt {0}"
         map.put(8593, SzException.class);                      // EAS_ERR_SALT_HMAC_CONTEXT_INIT_FAILED                                                 "Failed {0} to initialise an HMAC context."
         map.put(8594, SzException.class);                      // EAS_ERR_SALT_HMAC_FAILED                                                              "Failed {0} to HMAC block {1}."
         map.put(8595, SzException.class);                      // EAS_ERR_SALT_HMAC_FINAL_FAILED                                                        "Failed {0} to complete HMAC."
         map.put(8598, SzException.class);                      // EAS_ERR_SALT_HMAC_UNKNOWN_EXCEPTION                                                   "Unrecognized exception thrown generating HMAC."
         map.put(8599, SzConfigurationException.class);         // EAS_ERR_SALT_UNKNOWN_HASHING_METHOD                                                   "Unrecognized hashing method ({0}) requested."
         map.put(8601, SzConfigurationException.class);         // EAS_ERR_HASHER_REQUIRES_SECURE_STORE                                                  "Using a named salt requires the Secure Store configured and running"
         map.put(8602, SzConfigurationException.class);         // EAS_ERR_HASHER_CHECKSUM_DOES_NOT_MATCH                                                "The hashing checksum configured ({1}) does not match the checksum ({2}) of the salt named {0}"
         map.put(8603, SzException.class);                      // EAS_ERR_HASHER_UNABLE_TO_RECORD_SALT                                                  "Unable to record the configured salt"
         map.put(8604, SzConfigurationException.class);         // EAS_ERR_HASHER_REQUIRES_FUNCTION                                                      "Using hashing requires a configured hashing function"
         map.put(8605, SzConfigurationException.class);         // EAS_ERR_HASHER_EPHEMERAL_OR_NAMED_SALT                                                "Specify either a named salt or an ephemeral one. Can not have both"
         map.put(8606, SzConfigurationException.class);         // EAS_ERR_HASHER_SALT_REQUIRED                                                          "Hashing requires a salt to be configured."
         map.put(8607, SzConfigurationException.class);         // EAS_ERR_HASHER_INVALID_ARGS                                                           "Invalid arguments to hashing function. Either a parameter wasn't provided or a buffer was too small: location={0}, dataPtr={1}, dataLength={2}, outputPtr={3}, outputLength={4}, output={5}"
         map.put(8608, SzConfigurationException.class);         // EAS_ERR_NO_SALT_VALUE_CONFIGURED                                                      "No salt value is configured. A salt value must be configured if you wish to export the token library."
         map.put(8701, SzConfigurationException.class);         // EAS_ERR_PARAMETER_NOT_READABLE                                                        "The parameter store does not support a read interface"
         map.put(8702, SzConfigurationException.class);         // EAS_ERR_PARAMETER_NOT_WRITABLE                                                        "The parameter store does not support a write interface"
         map.put(9000, SzLicenseException.class);               // EAS_LIMIT_MAX_OBS_ENT                                                                 "LIMIT: Maximum number of records ingested: {0}"
         map.put(9107, SzConfigurationException.class);         // EAS_ERR_CANT_GET_PARAMETER_FROM_THE_STORE                                             "Cannot get parameter [{0}] from parameter store"
         map.put(9110, SzConfigurationException.class);         // EAS_ERR_INSUFFICIENT_CONFIG                                                           "Insufficient configuration for the {0} table!"
         map.put(9111, SzConfigurationException.class);         // EAS_ERR_PARSE_FRAGMENT                                                                "ERROR parsing FragmentID[{0}] FragmentName[{1}] : [{2}] is an invalid RuleID dependency"
         map.put(9112, SzConfigurationException.class);         // EAS_ERR_FAILED_TO_OPEN_INI_FILE_FOR_WRITING                                           "Failed to open ini file for writing [{0}]"
         map.put(9113, SzConfigurationException.class);         // EAS_ERR_FAILED_TO_OPEN_INI_FILE_FOR_READING                                           "Failed to open ini file for reading [{0}]"
         map.put(9115, SzBadInputException.class);              // EAS_ERR_INPUT_NOT_STANDARDIZED                                                        "Cannot process Observation that has not been standardized"
         map.put(9116, SzConfigurationException.class);         // EAS_ERR_CONFIG_TABLE_NOT_FOUND                                                        "CONFIG information for {0} not found!"
         map.put(9117, SzConfigurationException.class);         // EAS_ERR_CONFIG_TABLE_COLUMN_NOT_FOUND                                                 "CONFIG information for {0} not found in {1}!"
         map.put(9118, SzConfigurationException.class);         // EAS_ERR_CONFIG_TABLE_COLUMN_INDEX_NOT_FOUND                                           "Invalid column index {0} queried from {1} container!"
         map.put(9119, SzConfigurationException.class);         // EAS_ERR_CONFIG_TABLE_COLUMN_NAME_NOT_FOUND                                            "Invalid column name {0} queried from {1} container!"
         map.put(9120, SzConfigurationException.class);         // EAS_ERR_CONFIG_TABLE_MALFORMED                                                        "CONFIG information for {0} is malformed!"
         map.put(9210, SzConfigurationException.class);         // EAS_ERR_DIGEST_CONTEXT_INIT_FAILED                                                    "Unable to initialize Digest Context."
         map.put(9220, SzConfigurationException.class);         // EAS_ERR_FTYPE_CANNOT_BE_HASHED                                                        "FType configured to be hashed, but cannot be scored.  FTYPE_ID[{0}] FTYPE_CODE[{1}]"
         map.put(9222, SzConfigurationException.class);         // EAS_ERR_FTYPE_CONFIGURED_TO_BE_HASHED_MISSING_SALT                                    "A Feature Type is marked for hashing, but a valid salt value was not found.  FTYPE_ID[{0}] FTYPE_CODE[{1}]"
         map.put(9224, SzConfigurationException.class);         // EAS_ERR_FTYPE_CONFIGURED_TO_BE_HASHED                                                 "FType configured to be hashed, but no hashable data found.  FTYPE_ID[{0}] FTYPE_CODE[{1}]"
         map.put(9228, SzConfigurationException.class);         // EAS_ERR_UNEXPECTED_SALT_CHECKSUM_LIST                                                 "The SALT checksum on the Observation does not match the EXPECTED SALT checksum: EXPECTED=[{0}] Observation=[{1}]"
         map.put(9240, SzConfigurationException.class);         // EAS_ERR_CIPHER_CONTEXT_INIT_FAILED                                                    "Unable to initialize an ICC Context."
         map.put(9241, SzConfigurationException.class);         // EAS_ERR_CIPHER_OP_FAILED                                                              "Unable to perform a required ICC operation."
         map.put(9250, SzConfigurationException.class);         // EAS_ERR_G2SS_INVALID_LIB                                                              "Invalid ({1}) Secure Store plug-in library: {0}"
         map.put(9251, SzConfigurationException.class);         // EAS_ERR_G2SS_INVALID_URL                                                              "Invalid Secure Store URL: {0}"
         map.put(9252, SzConfigurationException.class);         // EAS_ERR_G2SS_INVALID_PIN                                                              "Invalid Secure Store credential specification: {0}"
         map.put(9253, SzConfigurationException.class);         // EAS_ERR_G2SS_TOKEN_INIT_FAILED                                                        "Secure Store token initialization failed: {0}."
         map.put(9254, SzConfigurationException.class);         // EAS_ERR_G2SS_TOKEN_UNINITIALIZED                                                      "Cannot open a Secure Store session when the token is uninitialized."
         map.put(9255, SzConfigurationException.class);         // EAS_ERR_G2SS_USER_PIN_UNINITIALIZED                                                   "Secure Store credential is uninitialized."
         map.put(9256, SzConfigurationException.class);         // EAS_ERR_G2SS_SESSION_OPEN                                                             "Cannot open a Secure Store session when one is already open."
         map.put(9257, SzConfigurationException.class);         // EAS_ERR_G2SS_NO_SESSION                                                               "Cannot use Secure Store without a session."
         map.put(9258, SzConfigurationException.class);         // EAS_ERR_G2SS_SESSION_OPEN_FAILED                                                      "Secure Store session could not be opened: {0}."
         map.put(9259, SzConfigurationException.class);         // EAS_ERR_G2SS_ADMIN_LOGIN_FAILED                                                       "Secure Store admin login failed: {0}."
         map.put(9260, SzConfigurationException.class);         // EAS_ERR_G2SS_USER_LOGIN_FAILED                                                        "Secure Store user login failed: {0}."
         map.put(9261, SzConfigurationException.class);         // EAS_ERR_G2SS_PKCS11_ERROR                                                             "Secure Store function failed: {0}"
         map.put(9264, SzConfigurationException.class);         // EAS_ERR_G2SS_LOGOUT_FAILED                                                            "Secure Store logout failed: {0}."
         map.put(9265, SzConfigurationException.class);         // EAS_ERR_G2SS_NEED_RW_SESSION                                                          "Secure Store session must be read/write."
         map.put(9266, SzConfigurationException.class);         // EAS_ERR_G2SS_UNABLE_TO_VERIFY_KEY                                                     "Secure Store key does not meet requirements."
         map.put(9267, SzException.class);                      // EAS_ERR_G2SS_UNABLE_TO_CREATE_KEY                                                     "Secure Store key creation failed."
         map.put(9268, SzException.class);                      // EAS_ERR_G2SS_UNABLE_TO_CHANGE_PIN                                                     "Secure Store password change failed: {0}."
         map.put(9269, SzConfigurationException.class);         // EAS_ERR_G2SS_INVALID_OLD_CREDENTIAL                                                   "Secure Store old credential is invalid."
         map.put(9270, SzConfigurationException.class);         // EAS_ERR_G2SS_INVALID_NEW_CREDENTIAL                                                   "Secure Store new credential is invalid."
         map.put(9271, SzException.class);                      // EAS_ERR_G2SS_OUT_OF_MEMORY                                                            "Secure Store out of memory."
         map.put(9272, SzException.class);                      // EAS_ERR_G2SS_FIND_INIT_FAILED                                                         "Secure Store object locating failed: {0}."
         map.put(9273, SzException.class);                      // EAS_ERR_G2SS_FIND_FAILED                                                              "Secure Store object find failed: {0}."
         map.put(9274, SzException.class);                      // EAS_ERR_G2SS_CRYPTO_SETUP_FAILED                                                      "Secure Store setup of encryption failed: {0}."
         map.put(9275, SzException.class);                      // EAS_ERR_G2SS_ENCRYPT_START_FAILED                                                     "Secure Store unable to start encryption: {0}."
         map.put(9276, SzException.class);                      // EAS_ERR_G2SS_ENCRYPT_SIZE_FAILED                                                      "Secure Store unable to get the size of encrypted data: {0}."
         map.put(9277, SzException.class);                      // EAS_ERR_G2SS_ENCRYPT_FAILED                                                           "Secure Store encryption failed: {0}."
         map.put(9278, SzException.class);                      // EAS_ERR_G2SS_DECRYPT_START_FAILED                                                     "Secure Store unable to start decryption: {0}."
         map.put(9279, SzException.class);                      // EAS_ERR_G2SS_DECRYPT_FAILED                                                           "Secure Store decryption failed: {0}."
         map.put(9280, SzException.class);                      // EAS_ERR_G2SS_OBJECT_SAVE_FAILED                                                       "Secure Store unable to save object: {0}."
         map.put(9281, SzException.class);                      // EAS_ERR_G2SS_OBJECT_DELETE_FAILED                                                     "Secure Store unable to delete object: {0}."
         map.put(9282, SzException.class);                      // EAS_ERR_G2SS_OBJECT_CHANGE_FAILED                                                     "Secure Store unable to modify object: {0}."
         map.put(9283, SzException.class);                      // EAS_ERR_G2SS_UNINITIALIZED                                                            "Secure Store has not been initialized"
         map.put(9284, SzConfigurationException.class);         // EAS_ERR_G2SS_INVALID_SLOT_ID                                                          "Can not obtain info on specified slot. Possibly invalid slot ID specified in Secure Store URL: {0}"
         map.put(9285, SzConfigurationException.class);         // EAS_ERR_G2SS_NO_TOKEN_IN_SLOT                                                         "No security token present in slot specified by Secure Store URL: slot ID = {0}"
         map.put(9286, SzConfigurationException.class);         // EAS_ERR_G2SS_TOKEN_NOT_FOUND                                                          "Can not obtain info for security token. Possibly invalid token label and/or slot ID specified in Secure Store URL: {0}"
         map.put(9287, SzException.class);                      // EAS_ERR_G2SS_TOKEN_IMPL_ERROR                                                         "An internal error occurred in the security token implementation library: Return Code = {0}"
         map.put(9288, SzException.class);                      // EAS_ERR_G2SS_USER_PIN_PROMPT_FAILED                                                   "Was unable to prompt user for security token authentication."
         map.put(9289, SzException.class);                      // EAS_ERR_G2SS_LABEL_CHANGED_SINCE_CONFIG_INIT                                          "Secure Store has been reconfigured since loading."
         map.put(9290, SzException.class);                      // EAS_ERR_G2SS_OBJECT_NOT_FOUND                                                         "Secure Store does not have an object called {0}."
         map.put(9292, SzConfigurationException.class);         // EAS_ERR_G2SS_NO_PASSWORD                                                              "No password supplied"
         map.put(9293, SzConfigurationException.class);         // EAS_ERR_G2SS_NO_SEC_STORE_PREFIX                                                      "Secure Store expects a different format (starting with {0}) when a password is supplied"
         map.put(9295, SzConfigurationException.class);         // EAS_ERR_G2SS_NO_DATA_OBJECTS                                                          "There are no Secure Store objects stored on the token"
         map.put(9296, SzConfigurationException.class);         // EAS_ERR_G2SS_SEC_STORE_ARCHIVE_BAD                                                    "The exported archive appears to be corrupted around object {0}"
         map.put(9297, SzConfigurationException.class);         // EAS_ERR_G2SS_FILE_NOT_FOUND                                                           "Secure Store failed to open {0}"
         map.put(9298, SzConfigurationException.class);         // EAS_ERR_G2SS_FILE_CONTENTS_BAD                                                        "Secure Store contents of {0} not usable."
         map.put(9299, SzException.class);                      // EAS_ERR_G2SS_CLASS_NOT_INIT                                                           "Secure Store internal error."
         map.put(9300, SzConfigurationException.class);         // EAS_ERR_G2SS_PASSWORD_CHECK_ERROR                                                     "Secure Store internal error ({0}) checking password."
         map.put(9301, SzConfigurationException.class);         // EAS_ERR_MISSING_SEQUENCE_ENTRY                                                        "Missing Sequence Entry[{0}] in the SYS_SEQUENCE table!"
         map.put(9305, SzException.class);                      // EAS_ERR_SEQUENCE_RETRIES_FAILED                                                       "Retries failed to retrieve Sequence Entry[{0}] in the SYS_SEQUENCE table!  This may mean the CACHE_SIZE is too small."
         map.put(9308, SzConfigurationException.class);         // EAS_ERR_MISSING_STATUS_ENTRY                                                          "Could not retrieve status entry[{0}] in the SYS_STATUS table!"
         map.put(9309, SzConfigurationException.class);         // EAS_ERR_SEQUENCE_HAS_BEEN_RESET                                                       "Sequence entry[{0}] has been reset."
         map.put(9310, SzConfigurationException.class);         // EAS_ERR_INVALID_STATUS_ENTRY_VALUE                                                    "Invalid value for status entry[{0}] in the SYS_STATUS table!"
         map.put(9311, SzException.class);                      // EAS_ERR_COULD_NOT_RECORD_USAGE_TYPE                                                   "Could not record usage type [{0}] in the SYS_CODES_USED table!"
         map.put(9406, SzException.class);                      // EAS_ERR_G2SS_SESSION_MUST_NOT_BE_OPEN                                                 "Secure Store cannot fetch a value with sync if a session is already open."
         map.put(9408, SzConfigurationException.class);         // EAS_ERR_G2SS_PASSWORD_INADEQUATE                                                      "The provided password is not strong enough: {0}"
         map.put(9409, SzConfigurationException.class);         // EAS_ERR_G2SS_FUNCTION_LIST_NOT_SET                                                    "The security token interface is not yet set"
         map.put(9410, SzException.class);                      // EAS_ERR_G2SS_PKCS_INIT_FAILED                                                         "Initializing token driver failed {0}"
         map.put(9411, SzException.class);                      // EAS_ERR_G2SS_PKCS_FINAL_FAILED                                                        "Finalizing token driver failed {0}"
         map.put(9413, SzConfigurationException.class);         // EAS_ERR_G2SS_INCORRECT_PASSWORD                                                       "The export file password appears to be incorrect."
         map.put(9414, SzBadInputException.class);              // EAS_ERR_STRING_IS_INVALID_UTF8                                                        "Invalid data string. Data must be in UTF-8."
         map.put(9500, SzConfigurationException.class);         // EAS_ERR_TOKEN_LIBRARY_CHECKSUM_MISMATCH                                               "Cannot load token library. The checksum does not match the configuration of this node. Found: [{0}] Expected: [{1}]"
         map.put(9501, SzException.class);                      // EAS_TOKEN_LIBRARY_ALREADY_HASHED                                                      "Cannot hash token library. The Token Library contains previous hashed data"
         map.put(9701, SzException.class);                      // EAS_ERR_CANT_RETRIEVE_INDEX_FROM_MEMORY_ROW                                           "Cannot retrieve index[{0}] from memory row of key[{1}], out of range!"
         map.put(9802, SzConfigurationException.class);         // EAS_ERR_INBOUND_OBS_CONFIG_CHECKSUM_MISMATCH                                          "Configuration checksum on inbound observation [{0}] does not match this nodes configuration checksum [{1}]. Cannot process."
         map.put(9803, SzConfigurationException.class);         // EAS_ERR_CALC_CONFIGCHKSUM_AND_PARAMSTORE_CONFIGCHKSUM_DONT_MATCH                      "The calculated configuration checksum [{0}] does not match the CONFIGURATION_CHECKSUM value in the parameter store [{1}]."
     }
 }